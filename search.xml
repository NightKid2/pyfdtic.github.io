<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Django-学习总结]]></title>
    <url>%2F2018%2F03%2F14%2FDjango-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>web development</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible-学习总结]]></title>
    <url>%2F2018%2F03%2F14%2FAnsible-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AngularJS-学习总结]]></title>
    <url>%2F2018%2F03%2F14%2FAngularJS-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
        <tag>JS 前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-标准库]]></title>
    <url>%2F2018%2F03%2F14%2Fpython-%E6%A0%87%E5%87%86%E5%BA%93%2F</url>
    <content type="text"><![CDATA[python 标准库]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python 标准库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask-学习总结]]></title>
    <url>%2F2018%2F03%2F14%2FFlask-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Flask 学习总结]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>web development</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime-Text-使用总结]]></title>
    <url>%2F2018%2F03%2F14%2FSublime-Text-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[1. 初始化配置 设置 Linux 换行符 Perference-&gt;Setting-*. 设置对象是 default_line_ending, 这个参数有三 个可用选项： - system : system是根据当前系统情况设置, - windows : windows使用的CRLF, - unix : unix使用的是 LF 设置 tab 为 4 个空格. Preference -&gt; Settings-User // The number of spaces a tab is considered equal to &quot;tab_size&quot;: 4, // Set to true to insert spaces when tab is pressed &quot;translate_tabs_to_spaces&quot;: true, 自动保存 Preference -&gt; Settings-User &quot;save_on_focus_lost&quot;: true 2. 插件 install package controll SUBLIME TEXT 3 import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) SUBLIME TEXT 2 import urllib2,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), &apos;wb&apos; ).write(by) if dh == h else None; print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h) if dh != h else &apos;Please restart Sublime Text to finish installation&apos;) 大块方框, Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings User {&quot;anaconda_linting&quot;: false} 中文输入法光标跟随 Packages Control -&gt; install -&gt; IMESupport 常用插件 SublimeLinter : 用于高亮提示用户编写的代码中存在的不规范和错误的写法, 支持 JavaScript、CSS、HTML、Java、PHP、Python、Ruby 等十多种开发语言. SideBarEnhancements : SideBarEnhancements是一款很实用的右键菜单增强插件；在安装该插件前, 在Sublime Text左侧FOLDERS栏中点击右键, 只有寥寥几个简单的功能 Javascript-API-Completions : 支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件, 是少数支持sublime text 3的后缀提示的插件, HTML5标签提示sublime text3自带, 不过JQuery提示还是很有用处的, 也可设置要提示的语言. Git : Glue : 会在界面下方显示一个小窗口, 你可以在那里写Shell脚本. 这样一来, 你的编辑器就不仅仅局限于使用Git了 GitGutter &amp; Modific : 这些插件可以高亮相对于上次提交有所变动的行, 换句话说是实时的diff工具 GitGutter : 这是一个小巧有用的插件, 它会告诉你自上次git commit以来已经改变的行. 一个指示器显示在行号的旁边. PlainTasks : 杰出的待办事项表！所有的任务都保持在文件中, 所以可以很方便的把任务和项目绑定在一起. 可以创建项目, 贴标签, 设置日期. 有竞争力的用户界面和快捷键. Lua : Python : AllAutocomplete : 搜索全部打开的标签页 Emmet : HTML 快速补全 markdown : anaconda : Python IDE anaconda 不能与 jedi 同时存在, 会出现 左括号无法写入的情况. GBK support : 支持 GBK 编码 SublimeTmpl : 支持文件模板, git 地址. 默认模板支持及快捷键 ctrl+alt+h html ctrl+alt+j javascript ctrl+alt+c css ctrl+alt+p php ctrl+alt+r ruby ctrl+alt+shift+p python 添加自定义模板文件及快捷键 : 参考 https://segmentfault.com/a/1190000008674119 1. 新建并编辑自定义模板文件 Packages\User\SublimeTmpl\templates\hexomd.tmpl --- title: ${saved_filename} date: ${date} categories: tags: --- 摘要 &lt;!-- more --&gt; 正文 2. sublime 模板文件定义 [ { &quot;caption&quot;: &quot;Tmpl: Create Hexo Markdown&quot;, &quot;command&quot;: &quot;sublime_tmpl&quot;, &quot;args&quot;: {&quot;type&quot;: &quot;hexomd&quot;} } ] 3. 快捷键定义 [ { &quot;keys&quot;: [&quot;ctrl+alt+m&quot;], &quot;command&quot;: &quot;sublime_tmpl&quot;, &quot;args&quot;: {&quot;type&quot;: &quot;hexomd&quot;}, &quot;context&quot;: [{&quot;key&quot;: &quot;sublime_tmpl.hexomd&quot;}] } ] 4. 用户设置定义 { # 支持 ${saved_filename} 变量 &quot;enable_file_variables_on_save&quot;: true, } 设置快捷键. 在SublimeText里, 打开Preferences -&gt; Key Bindings - User, 我设置的快捷键： [ { &quot;keys&quot;: [&quot;ctrl+f9&quot;], &quot;command&quot;: &quot;build&quot; }, { &quot;keys&quot;: [&quot;f10&quot;], &quot;command&quot;: &quot;build&quot;, &quot;args&quot;: {&quot;variant&quot;: &quot;Run&quot;} }, { &quot;keys&quot;: [&quot;ctrl+shift+x&quot;], &quot;command&quot;: &quot;toggle_comment&quot;, &quot;args&quot;: { &quot;block&quot;: true } }, ]]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown 语法总结]]></title>
    <url>%2F2018%2F03%2F14%2Fmarkdown-%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[区块元素 段落 1. 类 Setext 格式 : 底线 形式 最高阶标题 : ==== 第二阶标题 : ---- 示例 : This is H1 ========== This is H2 ---------- 2. 类 atx 格式 : # 形式 在行首插入 1 - 6 个 # , 对应标题1 - 标题6 示例 : # This is H1 ## This is H2 ### This is H3 ** 可以选择性的 [闭合] 类 atx 样式的标题 : 在行尾加上 # , 而且行尾的 # 数量也无需同开头一样. 区块引用 Blockquotes 普通区块引用 : &gt; &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 嵌套区块引用 : 根据层次加上不同数量的 &gt; &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt;&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt;&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 引用的区域也可以使用其他的 Markdown 语法 : 包括标题,列表,代码区块等. 列表 有序列表 : 数字 + . 无序列表 : * + - , 作用相同, 无差别. ** 层次化表示, 需要缩进. ** 转义 : \ 如 : 1991\.12\.12 代码区块 缩进4个空格 , 或者 1 个制表符. 代码区块会一直持续到没有缩进的那一行, 或是文件结尾. ** 代码区块中, 一般 Markdown 语法不会被转换. 代码 小段代码 `CODE` `` CODE `` ** 多个反引号时, 可以在代码中使用 反引号本身. ** 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号 ** 在代码区段内，&amp; 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易 分割线 : 三个以上的星号,减号,底线来建立一个分割线, 行内不能有其他东西. 型号或减号之间可以插入空格. *** * * * --- - - - - - 链接 链接文字 : [文字] 行内式 [Name](http://www.baidu.com &quot;Title&quot;) 相对路径 [logo](/static/logo.jpg &quot;logo&quot;) 参考式 : 先定义, 后引用 定义 : 在文档的任意处, 把这个标记的链接内容定义出来： [id]: http://example.com &quot;Optionnal Title&quot; 引用 : 不区分大小写 [Name][id] 示例 : [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) [id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; [link text][a] [link text][A] 强调 : *WORDS* : &lt;em&gt; _WORDS_ : &lt;em&gt; **WORD** : &lt;strong&gt; __WORD__ : &lt;strong&gt; \* : 转义 \_ : 转义 ** 如果 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 图片 行内式 ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 参考式 ![Alt text][id] [id]: url/to/image &quot;Optional title attribute&quot; ** Markdown 无法指定图片的 宽高, 如果需要可以使用 &lt;img&gt; 标签. 自动链接 : 针对 URL 和 Email 地址 &lt;http://example.com/&gt; &lt;address@example.com&gt; 反斜杠 : 转义 Markdown 支持一下这些符号前面加上 反斜杠 来帮助插入普通的符号. \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 免费编辑器 Windows 平台 MarkdownPad MarkPad Linux 平台 ReText Mac 平台 Mou 在线编辑器 Markable.in Dillinger.io 浏览器插件 MaDe (Chrome) 高级应用 Sublime Text 2 + MarkdownEditing / 教程]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>标记语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+nexT 博客建设指南]]></title>
    <url>%2F2018%2F03%2F14%2FHexo-nexT-%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[Hexo 搭建 Github 博客一. 开始使用1. 安装 git$ yum install git -y 2. 安装 NodeJS$ git clone https://github.com/creationix/nvm.git $ source nvm/nvm.sh $ nvm install stable 3. 设置 Github3.1 注册 github3.2 创建 github page创建仓库, 仓库的名字要和你的账号对应, 格式为: USERNAME.github.io 4. 安装 hexo-cli$ chmod 755 /root &amp;&amp; mkdir -m 755 -p /root/.npm/_logs $ npm install -g hexo-cli $ chmod 700 /root $ npm install -g hexo-cli 5. 建站5.1 安装配置$ hexo init &lt;floder&gt; $ cd &lt;floder&gt; $ npm install 文件件目录结构 . ├── _config.yml # 网站的配置信息, 可以在此配置大部分参数 ├── package.json # 应用程序的信息. EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 ├── scaffolds # 模板文件夹, 当新建文章时, Hexo 会根据 scaffold 来建立文件. | # Hexo 的模板是指在新建的 markdown 文件中默认填充的内容, 每次新建一篇文章时都会包含这个修改. ├── source # 存放用户资源. 除 _posts 文件夹外, 开头命名为 _ 的文件/文件夹和隐藏的文件都会被忽略. | | # Markdown 和 HTML 文件会被解析并放到 public 文件夹, 而其他文件会被拷贝过去. | ├── _drafts | └── _posts └── themes # 主题文件夹, Hexo 会根据主题来生成静态内容. # 安装 next theme, 可选. $ mkdir themes/next $ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d &apos;&quot;&apos; -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1 # 修改默认 主题设置, 可选 $ vim _config.yml theme: next # 安装 hexo server $ npm install hexo-server --save # 启动 hexo server $ hexo server --ip=0.0.0.0 5.2 写文章与提交部署安装 hexo-deployer-git 部署方式 $ npm install hexo-deployer-git --save # 配置部署方式 $ vim _config.yml deploy: type: git repo: https://github.com/pyfdtic/pyfdtic.github.io.git branch: master 写文章 # hexo new &quot;TITLE&quot; $ vim source/_posts/TITLE.md --- title: first post date: 2018-03-14 17:08:36 categories: - test tags: - tag-a - tag-b - tag-c --- # content 写摘要: --- 这里是摘要 &lt;!-- more --&gt; 这是正文 生成静态文件并部署 $ hexo g -d 密钥认证提交 $ vim _config.yml 其中 repo 配置为 ssh 协议地址 # 语言配置 language: zh-Hans $ 在 github 上配置 ssh 密钥. 5.4 配置主题文档 $ vim themes/next/_config.yml # 主页预览显示 auto_excerpt: enable: true length: 250 # 选择不同的主体 #scheme: Muse scheme: Mist # 主页设置 menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive tags/categories 页面 # tags $ hexo new page &quot;tags&quot; $ vim source/tags/index.md --- title: Tags date: 2018-03-14 18:09:40 type: &quot;tags&quot; comments: false --- $ vim themes/next/_config.yml menu: # ... tags: /tags/ || tags # ... # categories $ hexo new page &quot;categories&quot; $ vim source/categories/index.md --- title: Tags date: 2018-03-14 18:09:40 type: &quot;categories&quot; comments: false --- $ vim themes/next/_config.yml menu: # ... categories: /categories/ || th # ... about页面 $ hexo new page &quot;about&quot; 谷歌/百度统计 $ vim _config.yml google_analytics: UA-[numbers] baidu_analytics: your-analytics-id 站内搜索: $ npm install hexo-generator-searchdb --save $ vim _config.yml search: path: search.xml field: post format: html limit: 10000 $ vim themes/next/_config.yml local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: -1 站点地图: $ npm install hexo-generator-sitemap $ vim themes/next/_config.yml menu: # ... sitemap: /sitemap.xml || sitemap $ 在 google Search console 提交 siteamp 地图. 配置资源文件夹 $ mkdir source/images # 在文章中引用 ![](/images/image.jpg) 主题配置参考站点配置 # ============================================================================= # NexT Theme configuration # ============================================================================= avatar: https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460 # Duoshuo duoshuo_shortname: notes-iissnan # Disqus disqus_shortname: # Social links social: GitHub: https://github.com/iissnan Twitter: https://twitter.com/iissnan Weibo: http://weibo.com/iissnan DouBan: http://douban.com/people/iissnan ZhiHu: http://www.zhihu.com/people/iissnan # Creative Commons 4.0 International License. # http://creativecommons.org/ # Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero creative_commons: by-nc-sa # Google Webmaster tools verification setting # See: https://www.google.com/webmasters/ google_site_verification: VvyjvVXcJQa0QklHipu6pwm2PJGnnchIqX7s5JbbT_0 # Google Analytics # Google分析ID google_analytics: # 百度分析ID baidu_analytics: 50c15455e37f70aea674ff4a663eef27 # Specify the date when the site was setup since: 2011 # ============================================================================= # End NexT Theme configuration # ============================================================================= 主题配置文件 menu: home: / categories: /categories archives: /archives tags: /tags #about: /about # Place your favicon.ico to /source directory. favicon: /favicon.ico # Set default keywords (Use a comma to separate) keywords: &quot;Hexo,next&quot; # Set rss to false to disable feed link. # Leave rss as empty to use site&apos;s feed link. # Set rss to specific value if you have burned your feed already. rss: # Icon fonts # Place your font into next/source/fonts, specify directory-name and font-name here # Avialable: default | linecons | fifty-shades | feather #icon_font: default #icon_font: fifty-shades #icon_font: feather icon_font: linecons # Code Highlight theme # Available value: normal | night | night eighties | night blue | night bright # https://github.com/chriskempson/tomorrow-theme highlight_theme: normal # MathJax Support mathjax: # Schemes scheme: Mist # Automatically scroll page to section which is under &lt;!-- more --&gt; mark. scroll_to_more: true # Automatically add list number to toc. toc_list_number: true ## DO NOT EDIT THE FOLLOWING SETTINGS ## UNLESS YOU KNOW WHAT YOU ARE DOING # Use velocity to animate everything. use_motion: true # Fancybox fancybox: true # Static files vendors: vendors css: css images: images # Theme version version: 0.4.2 5.4 删除文章$ hexo clean $ hexo g -d 6. 配置 _config.yml6.1 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述, 网站 SEO author 作者. 显示文章的作者 language 网站使用的语言 timezone 网站时区. Hexo 默认使用浏览器时区 6.2 网址 参数 描述 默认值 url 网址 - root 网站根目录 - permalink 文章的永久链接 :year/:mouth/:day/:title permalink_defaults 永久链接中各部分的默认值 网站存放在子目录, 如果网站存放在子目录中, 如 http://yoursite.com/blog , 则需要把 url 设为 ‘http://yoursite.com/blog&#39;, 并把 root 设为 /blog/; 6.3 目录 参数 描述 默认值 source_dir 资源文件夹, 用于存放内容 source public_dir 公共文件夹, 用于存放生成的站点文件 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir include code 文件夹 downloads/code i18n_dir 国际化(i18n)文件夹 :lang skip_render 跳过指定文件的渲染, 可使用 glob 表达式来匹配路径 如果刚接触 hexo , 则没必要设置以上各值. 6.4 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 默认情况下，Hexo生成的超链接都是绝对地址. 建议使用绝对地址. 6.5 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 6.6 日期/时间格式Hexo 使用 Moment.js 来解析和显示时间. 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 6.7 分页 参数 描述 默认值 per_page 每页显示的文章数量(0= 关闭分页功能) 10 pagination_dir 分页目录 page 6.8 扩展 参数 描述 默认值 theme 当前主题名称, 值为 false 时禁用主题 deploy 部署部分的设置 7. 指令$ hexo SUB_CMD PARAM init [floder] : 新建一个网站. floder 为空时, 为当前文件夹. new [layout] &lt;title&gt; : 新建一篇文章, 如果没有设置`layout`的话, 默认使用 `_config.yml` 中的 `default_layout` 参数代替. 如果标签包含空格, 请使用引号. generate : 生成静态文件. 可以简写为 &quot;hexo g&quot; --d, --deploy : 文件生成后, 立即部署网站 -w, --watch : 监视文件变动. publish [layout] &lt;filename&gt; : 发表草稿 server : 启动服务器, 默认为 &quot;http://localhost:4000/&quot; -p, --port : 指定端口 -s, --static : 只使用静态文件, -l, --log : 启动日志记录, 使用覆盖记录格式. deploy : 部署网站. 可以简写为 &quot;hexo d&quot; -g, --generate : 部署之前预先生成静态文件. render &lt;file1&gt; [file2] ... : 渲染文件. -o, --output : 设置输出路径. migrate &lt;type&gt; : 从其他博客系统迁移. clean : 清除缓存文件(db.json) 和 已生成的静态文件(public). 在某些情况下(尤其是更换主题后), 如果发现对网站的更改无论如何不生效, 可能需要运行该命令. list &lt;type&gt; : 列出网站资料 version : 显示 hexo 版本 --safe : 在安全模式下运行, 不会载入插件和脚本. 当安装新插件遇到问题时, 可以尝试以安全模式重新执行. --debug : 在终端中显示调试信息, 并记录到 debug.log. --silent : 隐藏终端信息 --config custom.yml : 自定义配置文件路径, 执行后将不再使用 _config.yml --draft : 显示 source/_drafts 文件夹中的草稿万丈. --cwd /path/to/cwd : 自定义当前工作目录. 二. 基本操作1. 写作1.1 新建文章新建一篇文章: $ hexo new [layout] &lt;title&gt; 可以在 layout 中指定文章的布局(layout), 默认为 post, 可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局. 1.2 文章布局Hexo 有三种默认布局: post, page, draft. 他们分别对应不同的路径, 用户自定义的其他布局和post相同, 都将存储在source/_posts 文件夹. 布局 路径 post source/_posts page source draft source/_drafts 如果你不希望你的文章被处理, 可以将 Front-Matter 中的 layout: 设置为 false 1.2.1 草稿草稿(draft) 默认不会显示在页面中, 可以在执行时加上 --draft 参数, 或是把 render_drafts 参数设置为 true 来预览草稿. draft 为草稿布局, 保存与 source/_drafts 目录, 可以通过 publish 命令将草稿移动到source/_posts 文件夹, publish 与 new 使用方式十分类似. $ hexo publish [layout] &lt;title&gt; 1.3 文件名称Hexo 默认以标题作为文件名称, 可以编辑 new_post_name 参数来改变默认的文件名称.如 :year-:month-:day-:title.md. 变量 描述 :title 标题(小写, 空格将被替换为短杠) :year 建立年份, 如 2016 :mouth 建立月份, 前导有零, 如 04 :i_mouth 建立月份, 前导无零, 如 4 :day 建立的日期, 前导有零, 如 07 :i_day 建立的日期, 前导无零, 如 7 1.4 模板(scaffold)1.4.1 使用方法在新建文章时, Hexo 会根据 scaffolds 文件夹内向对应的文件来建立新文件. 如: # hexo 在 scaffolds 文件夹中寻找 photo.md , # 并根据其内容建立文章. $ hexo new photo &quot;My Gallery&quot; 1.4.2 模板中的可用变量 变量 描述 layout 布局 title 标题 date 文件建立日期 2. Front-matter2.1 使用格式及预定义参数Front-matter 是文件最上方以 --- 分割的区域, 用于指定个别文件的变量. title: Hello World date: 2013/7/12 20:46:25 --- 预定义参数列表如下: 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件跟新日期 comments 开启文章评论功能 true tags 标签(不适用于分页) categories 分类(不适用于分页) permalink 覆盖文章网址 2.2 分类和标签只有文章支持分类和标签, 可以在 Front-matter 中设置. 分类: 分类有顺序性和层次性, 如 Foo,Bar 不等于 Bar, Foo 标签: 标签没有顺序和层次 示例: categories: - Diary tags: - PS3 - Games WordPress 支持对一篇文章设置多个分类, 而且这些分类可以是同级的, 也可以是父子分类. 但 Hexo 不支持指定多个同级分类. 如下的分类, Life 将成为 Diary 的子分类. categories - Diary - Life 2.3 JSON Front-matter可以使用 JSON 来编写 Front-matter, 只需将 --- 替换为 ;;; 即可: &quot;title&quot;: &quot;Hello World&quot; &quot;date&quot;: &quot;2013/7/12 20:46:25&quot; ;;; 3. 标签插件(Tag Plugins)标签插件和 Front-matter 中的标签不同, 标签插件是用于在文章中快速插入特定内容的插件 3.1 引用块在文章中插入引言, 可包含作者, 来源 和 标题. 格式 {% blockquote [author[, source]] [link] [source_link_title] %} CONTENT {% endblockquote %} 示例 # 引用网络上的文章 {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %} Every interaction is both precious and an opportunity to delight. {% endblockquote %} # 引用书上的句子 {% blockquote David Levithan, Wide Awake %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. {% endblockquote %} 3.2 代码块在文章中插入代码. 格式 {% codeblock [title] [lang:language] [url] [link text] %} CODE_SNIPPET {% endcodeblock %} 示例 # 附加说明和网址 {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %} _.compact([0, 1, false, 2, '', 3]); => [1, 2, 3] {% endcodeblock %} # 指定语言 {% codeblock lang:objc %} [rectangle setX: 10 y: 10 width: 20 height: 20]; {% endcodeblock %} 3.3 反引号代码块使用三个反引号类包裹的代码块: ``` [language] [title] [url] [link text] code snippet ``` 3.4 Pull Quote{% pullquote [class] %} content {% endpullquote %} 3.5 jsFiddle{% jsfiddle shorttag [tabs] [skin] [width] [height] %} 3.6 Gist{% gist gist_id [filename] %} 3.7 iframe{% iframe url [width] [height] %} 3.8 Image{% img [class names] /path/to/image [width] [height] [title text [alt text]] %} 3.9 Link在文章中插入链接, 并自动给外部链接添加 target=&quot;_blank&quot; {% link text url [external] [title] %} 3.10 Include Code插入source文件夹内的代码文件. {% include_code [title] [lang:language] path/to/file %} 3.11 Youtube插入 Youtube 视频. {% youtube video_id %} 3.12 Vimeo插入 vimeo 视频 {% vimeo video_id %} 3.13 引用文章引用其他文章的链接. {% post_path slug %} {% post_link slug [title] %} 3.14 引用资源引用文章的资源 {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} 3.15 Raw如果希望在文章中插入 Swig 标签, 可以尝试使用 Raw 标签, 以免发生解析异常. {% raw %} content {% endraw %} 4. 资源文件夹资源Asset代表 source 文件夹中除了文章以外的所有文件, 如图片,CSS,JS文件等. 如在 source/images 文件夹中的图片, 可以使用类似于![](/images/NAME.jpg) 方法访问他们. 4.1 文章资源文件夹更加组织化的管理资源, 可以通过修改 config.yml 文件中的 post_asset_folder 选项设为 true 来打开. post_asset_folder: true 打开资源文件管理功能之后, Hexo 将会在每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建一个文件夹. 这个资源文件夹间会有与这个 markdown 文件一样的名字. 将所有与该文章有关的资源放在这个关联文件夹中之后, 可以通过相对路径来引用这些资源, 这样就得到了一个更简单而且方便的得多的工作流. 4.2 相对路径引用的标签插件通过常规的 markdown 语法和相对路径来引用图片和其他资源可能会导致他们在存档页和主页上显示不正常. 可以使用如下方式引用资源, 解决这个问题: {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} 如, 当打开文章资源文件夹功能后, 资源文件夹中有一个 example.jpg 图片, 正确的引用该图片的方式是使用如下的标签插件, 而不是 markdown, 该图片将会同时出现在文章和主页及归档页中: {% asset_img example.jpg This is an example image %} 5. 数据文件有时, 可能需要在主题中使用某些资料, 而这些资料并不在文章内, 并且是需要重复使用的, 那么可以使用 Hexo 3.0 新增的 数据文件功能, 此功能会载入 source/_data 内的 YAML 或 JSON 文件, 以方便在网站中复用这些文件. # source/_date/menu.yml Home: / Gallery: /gallery/ Archives: /archives/ # 在模板中引用这些资料: &lt;% for (var link in site.data.menu) { %&gt; &lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt; &lt;% } %&gt; # 渲染结果 &lt;a href=&quot;/&quot;&gt; Home &lt;/a&gt; &lt;a href=&quot;/gallery/&quot;&gt; Gallery &lt;/a&gt; &lt;a href=&quot;/archives&quot;&gt; Archives &lt;/a&gt; 6. 服务器6.1 hexo-serverHexo 3.0 把服务器独立成了个别模块, 必须先安装 hexo-server 才能使用. # 安装 $ npm install hexo-server --save # 启动服务器, 默认 http://localhost:4000 $ hexo server [-p PORT] [-i IP_ADDRESS] [-s] -s : 静态模式, 服务器只处理 public 文件夹内的文件, 而不会处理文件变动, 在执行时, 应该先自行执行 hexo generate, 常用于生产环境. -i IP_ADDRESS : 指定IP地址, 默认为 0.0.0.0 . -p PORT : 指定监听端口. 6.2 PowPow 是 Mac 系统上的零配置 Rack 服务器, 他也可以作为一个简单易用的静态文件服务器来使用. # 安装 $ curl get.pow.cx | sh # 设置: 在 ~/.pow 文件夹建立链接(symlink) $ cd ~/.pow $ ln -s /path/to/myapp # 网站将在 http://myapp.dev 下运行, 网址根据链接名称而定. 7. 生成器7.1 生成文件:$ hexo generate [--watch] --watch : 监视文件变动并立即重新生成静态文件. 在生成时对比文件的 SHA1 , 只有变动的文件才会写入. 7.2 完成后部署如下两个命令功能相同, 让 Hexo 在生成完毕后自动部署网站. $ hexo generate --deploy $ hexo g -d # 上述命令的简写 $ hexo deploy --generate $ hexo d -g # 上述命令的简写 8. 部署部署步骤 $ vim _config.yml deploy: type: git $ hexo deploy 8.1 git 部署# 安装 hexo-deployer-git $ npm install hexo-deployer-git --save # 修改 _config.yml deploy: type: git repo: &lt;REPOSITORY URL&gt; branch: &lt;GIT BRANCH&gt; message: &lt;自定义提交信息&gt; # 默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }} # 部署 $ hexo deploy 8.2 Heroku 部署# 安装 hexo-deployer-heroku $ npm install hexo-deployer-heroku --save # 修改 _config.yml deploy: type: heroku repo: &lt;REPOSITORY URL&gt; message: &lt;自定义提交信息&gt; # 默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }} # 部署 $ hexo deploy 8.3 Rsync 部署8.4 OpenShift 部署8.5 FTPSync 部署三.自定义1. 永久链接(Permalink)https://hexo.io/zh-cn/docs/permalinks.html 2. 主题2.1 修改主题 在 themes 文件夹内, 创建一个任意名称的文件夹, 修改 _config.yml 内的 theme 设定, 即可切换主体题 2.2 主题目录结构. ├── _config.yml ├── languages ├── layout ├── scripts └── source 2.2.1 _config.yml主体的配置文件, 修改时会自动更新, 无需重启服务器. 2.2.2 languages语言文件夹, 参见国际化 2.2.3 layout布局文件夹, 用于存放主题的模板文件, 决定网站内容的呈现方式. Hexo 内建 Swig 模板引擎, 可以另外安装插件来获得 EJS, Haml, Jade 支持, Hexo 根据模板文件的扩展名来决定所使用的模板引擎. 2.2.4 scripts脚本文件夹, 在启动时, Hexo 会自定载入此文件夹内的 JavaScript 文件. 2.2.5 source资源文件夹, 除了模板以外的 Asset, 如 CSS , JavaScript 文件等, 都应该放在这个文件夹中. 文件或文件夹前缀为 _ (下划线) 或 隐藏的文件会被忽略. 如果文件可以被渲染的话, 会经过解析然后存储到 public 文件夹, 否则会直接拷贝到 public 文件夹. 3. 模板https://hexo.io/zh-cn/docs/templates.html 4. 变量https://hexo.io/zh-cn/docs/variables.html 5. 辅助函数https://hexo.io/zh-cn/docs/helpers.html#toc 6. 国际化(i18n)https://hexo.io/zh-cn/docs/internationalization.html 7. 插件https://hexo.io/zh-cn/docs/plugins.html nexThttp://theme-next.iissnan.com/getting-started.html#third-party-services 参考文档hexo-theme-nexthexo-wiki hexo 文档 - 中文hexo 文档 - 英文nexT 主题配置文档]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
</search>
